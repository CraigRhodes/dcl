type token =
  | INT
  | FLOAT
  | CHAR
  | VOID
  | NULL
  | STRING
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT_LITERAL of (int)
  | FLOAT_LITERAL of (float)
  | STRING_LITERAL of (string)
  | ID of (string)
  | CHAR_LITERAL of (char)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
 open Ast 
# 47 "parser.ml"
let yytransl_const = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* CHAR *);
  260 (* VOID *);
  261 (* NULL *);
  262 (* STRING *);
  263 (* SEMI *);
  264 (* LPAREN *);
  265 (* RPAREN *);
  266 (* LBRACE *);
  267 (* RBRACE *);
  268 (* COMMA *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* TIMES *);
  272 (* DIVIDE *);
  273 (* ASSIGN *);
  274 (* NOT *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* GEQ *);
  281 (* TRUE *);
  282 (* FALSE *);
  283 (* AND *);
  284 (* OR *);
  285 (* RETURN *);
  286 (* IF *);
  287 (* ELSE *);
  288 (* FOR *);
  289 (* WHILE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  290 (* INT_LITERAL *);
  291 (* FLOAT_LITERAL *);
  292 (* STRING_LITERAL *);
  293 (* ID *);
  294 (* CHAR_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\007\000\007\000\003\000\008\000\
\008\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\012\000\012\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\013\000\013\000\013\000\
\013\000\013\000\013\000\014\000\014\000\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\000\000\002\000\003\000\000\000\
\002\000\002\000\002\000\003\000\003\000\005\000\007\000\009\000\
\005\000\000\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\003\000\004\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\056\000\000\000\010\000\011\000\012\000\001\000\
\003\000\004\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\013\000\000\000\000\000\009\000\
\014\000\000\000\000\000\000\000\051\000\000\000\016\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\047\000\
\048\000\000\000\049\000\017\000\000\000\028\000\000\000\000\000\
\041\000\042\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\021\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\
\023\000\000\000\000\000\024\000"

let yydgoto = "\002\000\
\003\000\004\000\009\000\010\000\011\000\016\000\023\000\027\000\
\017\000\044\000\045\000\076\000\046\000\079\000\080\000"

let yysindex = "\009\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\221\254\062\255\000\000\054\255\233\254\032\255\
\033\255\000\000\046\255\054\255\000\000\013\255\054\255\000\000\
\000\000\022\255\043\255\060\255\000\000\230\255\000\000\000\000\
\230\255\230\255\187\255\063\255\078\255\081\255\000\000\000\000\
\000\000\005\255\000\000\000\000\024\000\000\000\214\000\077\255\
\000\000\000\000\000\000\042\000\230\255\230\255\230\255\230\255\
\230\255\000\000\230\255\230\255\230\255\230\255\230\255\230\255\
\230\255\230\255\230\255\230\255\230\255\230\255\000\000\000\000\
\000\000\230\000\006\001\085\255\246\000\006\001\084\255\082\255\
\006\001\068\255\068\255\000\000\000\000\049\001\049\001\083\255\
\083\255\083\255\083\255\037\001\022\001\179\255\230\255\179\255\
\000\000\230\255\059\255\060\000\000\000\006\001\179\255\230\255\
\000\000\091\255\179\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\092\255\000\000\000\000\
\093\255\000\000\000\000\000\000\000\000\000\000\111\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\096\255\000\000\095\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\255\000\000\000\000\034\255\000\000\099\255\
\009\255\082\000\104\000\000\000\000\000\222\255\198\000\126\000\
\148\000\170\000\192\000\035\255\000\255\000\000\000\000\000\000\
\000\000\000\000\145\255\000\000\000\000\040\255\000\000\108\255\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\095\000\000\000\253\255\000\000\000\000\074\000\
\000\000\168\255\226\255\016\000\000\000\000\000\000\000"

let yytablesize = 585
let yytable = "\047\000\
\008\000\012\000\049\000\050\000\052\000\099\000\040\000\101\000\
\040\000\001\000\015\000\040\000\056\000\018\000\105\000\043\000\
\022\000\043\000\108\000\026\000\043\000\057\000\074\000\075\000\
\077\000\078\000\081\000\040\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\019\000\039\000\054\000\039\000\020\000\054\000\039\000\029\000\
\055\000\024\000\030\000\055\000\031\000\032\000\005\000\021\000\
\033\000\006\000\028\000\007\000\034\000\039\000\039\000\027\000\
\100\000\027\000\013\000\102\000\013\000\014\000\053\000\035\000\
\036\000\075\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\029\000\061\000\062\000\030\000\054\000\031\000\072\000\
\055\000\103\000\033\000\095\000\097\000\098\000\034\000\059\000\
\060\000\061\000\062\000\107\000\006\000\007\000\026\000\052\000\
\048\000\035\000\036\000\053\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\016\000\026\000\025\000\016\000\106\000\
\016\000\016\000\000\000\000\000\016\000\000\000\000\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\016\000\000\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\022\000\000\000\000\000\
\022\000\000\000\022\000\022\000\000\000\000\000\022\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\022\000\000\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\029\000\
\000\000\000\000\030\000\000\000\031\000\000\000\000\000\029\000\
\033\000\051\000\030\000\000\000\034\000\000\000\000\000\000\000\
\033\000\000\000\000\000\000\000\034\000\000\000\000\000\035\000\
\036\000\000\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\000\000\000\000\000\000\039\000\040\000\041\000\042\000\
\043\000\000\000\000\000\000\000\033\000\000\000\033\000\000\000\
\000\000\033\000\029\000\000\000\000\000\030\000\000\000\000\000\
\033\000\033\000\000\000\033\000\000\000\000\000\000\000\034\000\
\033\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\006\000\000\000\007\000\039\000\
\040\000\041\000\042\000\043\000\050\000\000\000\050\000\000\000\
\000\000\050\000\050\000\050\000\050\000\050\000\000\000\000\000\
\050\000\050\000\050\000\050\000\050\000\050\000\058\000\000\000\
\050\000\050\000\000\000\000\000\059\000\060\000\061\000\062\000\
\000\000\000\000\063\000\064\000\065\000\066\000\067\000\068\000\
\073\000\000\000\069\000\070\000\000\000\000\000\059\000\060\000\
\061\000\062\000\000\000\000\000\063\000\064\000\065\000\066\000\
\067\000\068\000\104\000\000\000\069\000\070\000\000\000\000\000\
\059\000\060\000\061\000\062\000\000\000\000\000\063\000\064\000\
\065\000\066\000\067\000\068\000\000\000\000\000\069\000\070\000\
\029\000\000\000\029\000\000\000\000\000\029\000\029\000\029\000\
\000\000\000\000\000\000\000\000\029\000\029\000\029\000\029\000\
\029\000\029\000\000\000\000\000\029\000\029\000\030\000\000\000\
\030\000\000\000\000\000\030\000\030\000\030\000\000\000\000\000\
\000\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\
\000\000\000\000\030\000\030\000\035\000\000\000\035\000\000\000\
\000\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\000\035\000\035\000\035\000\035\000\035\000\000\000\000\000\
\035\000\035\000\036\000\000\000\036\000\000\000\000\000\036\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\000\000\000\000\036\000\036\000\
\037\000\000\000\037\000\000\000\000\000\037\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\000\000\000\000\037\000\037\000\038\000\000\000\
\038\000\000\000\000\000\038\000\034\000\000\000\034\000\000\000\
\000\000\034\000\038\000\038\000\038\000\038\000\038\000\038\000\
\034\000\034\000\038\000\038\000\000\000\000\000\071\000\000\000\
\034\000\034\000\059\000\060\000\061\000\062\000\000\000\000\000\
\063\000\064\000\065\000\066\000\067\000\068\000\094\000\000\000\
\069\000\070\000\059\000\060\000\061\000\062\000\000\000\000\000\
\063\000\064\000\065\000\066\000\067\000\068\000\096\000\000\000\
\069\000\070\000\059\000\060\000\061\000\062\000\000\000\000\000\
\063\000\064\000\065\000\066\000\067\000\068\000\000\000\000\000\
\069\000\070\000\059\000\060\000\061\000\062\000\000\000\000\000\
\063\000\064\000\065\000\066\000\067\000\068\000\000\000\000\000\
\069\000\070\000\059\000\060\000\061\000\062\000\000\000\000\000\
\063\000\064\000\065\000\066\000\067\000\068\000\000\000\000\000\
\069\000\059\000\060\000\061\000\062\000\000\000\000\000\063\000\
\064\000\065\000\066\000\067\000\068\000\059\000\060\000\061\000\
\062\000\000\000\000\000\000\000\000\000\065\000\066\000\067\000\
\068\000"

let yycheck = "\030\000\
\000\000\037\001\033\000\034\000\035\000\094\000\007\001\096\000\
\009\001\001\000\014\000\012\001\008\001\037\001\103\000\007\001\
\020\000\009\001\107\000\023\000\012\001\017\001\053\000\054\000\
\055\000\056\000\057\000\028\001\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\009\001\007\001\009\001\009\001\012\001\012\001\012\001\005\001\
\009\001\037\001\008\001\012\001\010\001\011\001\001\001\010\001\
\014\001\004\001\037\001\006\001\018\001\027\001\028\001\007\001\
\095\000\009\001\007\001\098\000\007\001\008\001\008\001\029\001\
\030\001\104\000\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\005\001\015\001\016\001\008\001\008\001\010\001\011\001\
\008\001\031\001\014\001\007\001\009\001\012\001\018\001\013\001\
\014\001\015\001\016\001\009\001\009\001\009\001\007\001\009\001\
\031\000\029\001\030\001\009\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\005\001\009\001\023\000\008\001\104\000\
\010\001\011\001\255\255\255\255\014\001\255\255\255\255\255\255\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\005\001\255\255\255\255\
\008\001\255\255\010\001\011\001\255\255\255\255\014\001\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\005\001\
\255\255\255\255\008\001\255\255\010\001\255\255\255\255\005\001\
\014\001\007\001\008\001\255\255\018\001\255\255\255\255\255\255\
\014\001\255\255\255\255\255\255\018\001\255\255\255\255\029\001\
\030\001\255\255\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\255\255\255\255\255\255\034\001\035\001\036\001\037\001\
\038\001\255\255\255\255\255\255\007\001\255\255\009\001\255\255\
\255\255\012\001\005\001\255\255\255\255\008\001\255\255\255\255\
\019\001\020\001\255\255\014\001\255\255\255\255\255\255\018\001\
\027\001\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\255\255\004\001\255\255\006\001\034\001\
\035\001\036\001\037\001\038\001\007\001\255\255\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\007\001\255\255\
\027\001\028\001\255\255\255\255\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\007\001\255\255\027\001\028\001\255\255\255\255\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\007\001\255\255\027\001\028\001\255\255\255\255\
\013\001\014\001\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\255\255\027\001\028\001\
\007\001\255\255\009\001\255\255\255\255\012\001\013\001\014\001\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\027\001\028\001\007\001\255\255\
\009\001\255\255\255\255\012\001\013\001\014\001\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\255\255\027\001\028\001\007\001\255\255\009\001\255\255\
\255\255\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\028\001\007\001\255\255\009\001\255\255\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\255\255\027\001\028\001\
\007\001\255\255\009\001\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\027\001\028\001\007\001\255\255\
\009\001\255\255\255\255\012\001\007\001\255\255\009\001\255\255\
\255\255\012\001\019\001\020\001\021\001\022\001\023\001\024\001\
\019\001\020\001\027\001\028\001\255\255\255\255\009\001\255\255\
\027\001\028\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\009\001\255\255\
\027\001\028\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\009\001\255\255\
\027\001\028\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\028\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\028\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\013\001\014\001\015\001\
\016\001\255\255\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001"

let yynames_const = "\
  INT\000\
  FLOAT\000\
  CHAR\000\
  VOID\000\
  NULL\000\
  STRING\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LITERAL\000\
  FLOAT_LITERAL\000\
  STRING_LITERAL\000\
  ID\000\
  CHAR_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 33 "parser.mly"
            ( _1 )
# 372 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
                 ( [], [] )
# 378 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 37 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 386 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 394 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 42 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 409 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                  ( [] )
# 415 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 50 "parser.mly"
                  ( List.rev _1 )
# 422 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parser.mly"
                             ( [(_1,_2)] )
# 430 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                             ( (_3,_4) :: _1 )
# 439 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
        ( Int )
# 445 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
         ( Void )
# 451 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
           (String)
# 457 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                     ( [] )
# 463 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 63 "parser.mly"
                     ( _2 :: _1 )
# 471 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 66 "parser.mly"
               ( (_1, _2) )
# 479 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                   ( [] )
# 485 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 70 "parser.mly"
                   ( _2 :: _1 )
# 493 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
              ( Expr _1 )
# 500 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                ( Return Noexpr )
# 506 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                     ( Return _2 )
# 513 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 76 "parser.mly"
                            ( Block(List.rev _2) )
# 520 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 77 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 528 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 78 "parser.mly"
                                            ( If(_3, _5, _7) )
# 537 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 547 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                                  ( While(_3, _5) )
# 555 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                  ( Noexpr )
# 561 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                  ( _1 )
# 568 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literals) in
    Obj.repr(
# 88 "parser.mly"
                    ( Literal(_1) )
# 575 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 583 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 591 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 599 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 607 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 615 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 623 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 631 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 639 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 647 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 655 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 663 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 671 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                         ( Unop(Neg, _2) )
# 678 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                     ( Unop(Not, _2) )
# 685 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                     ( Assign(_1, _3) )
# 693 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 104 "parser.mly"
                                 ( Call(_1, _3) )
# 701 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                       ( _2 )
# 708 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 108 "parser.mly"
                (Int_Lit(_1)))
# 715 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 109 "parser.mly"
                  (Float_Lit(_1))
# 722 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                   (String_Lit(_1))
# 729 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 111 "parser.mly"
                (Char_Lit(_1))
# 736 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "parser.mly"
                  ( Id(_1) )
# 743 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
                    ( Null )
# 749 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                  ( [] )
# 755 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 117 "parser.mly"
                  ( List.rev _1 )
# 762 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                            ( [_1] )
# 769 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                            ( _3 :: _1 )
# 777 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
