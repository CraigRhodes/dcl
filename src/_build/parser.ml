type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EXPONT
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | DOUBLE
  | STRING
  | INTLITERAL of (int)
  | DBLLITERAL of (float)
  | STRLITERAL of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 46 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* EXPONT *);
  268 (* ASSIGN *);
  269 (* NOT *);
  270 (* EQ *);
  271 (* NEQ *);
  272 (* LT *);
  273 (* LEQ *);
  274 (* GT *);
  275 (* GEQ *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* AND *);
  279 (* OR *);
  280 (* RETURN *);
  281 (* IF *);
  282 (* ELSE *);
  283 (* FOR *);
  284 (* WHILE *);
  285 (* INT *);
  286 (* BOOL *);
  287 (* VOID *);
  288 (* DOUBLE *);
  289 (* STRING *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  290 (* INTLITERAL *);
  291 (* DBLLITERAL *);
  292 (* STRLITERAL *);
  293 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\008\000\
\008\000\005\000\005\000\005\000\005\000\005\000\009\000\009\000\
\003\000\007\000\007\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\012\000\012\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\013\000\
\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\008\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\000\000\002\000\
\003\000\000\000\002\000\002\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\003\000\000\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\004\000\003\000\004\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\060\000\000\000\010\000\014\000\013\000\011\000\
\012\000\001\000\003\000\004\000\000\000\000\000\017\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\018\000\000\000\
\000\000\009\000\000\000\018\000\005\000\000\000\000\000\034\000\
\035\000\000\000\000\000\000\000\000\000\031\000\032\000\033\000\
\000\000\000\000\019\000\000\000\000\000\000\000\000\000\050\000\
\051\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\023\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\000\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\025\000\000\000\
\000\000\026\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\012\000\045\000\018\000\025\000\019\000\
\000\000\043\000\044\000\078\000\081\000\082\000"

let yysindex = "\007\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\229\254\027\255\000\000\071\255\
\254\254\033\255\056\255\000\000\066\255\071\255\000\000\041\255\
\122\255\000\000\015\000\000\000\000\000\015\000\015\000\000\000\
\000\000\086\255\077\255\089\255\096\255\000\000\000\000\000\000\
\080\255\088\255\000\000\117\000\091\255\048\001\158\255\000\000\
\000\000\000\000\136\000\015\000\015\000\015\000\015\000\015\000\
\032\255\000\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\117\255\
\000\000\000\000\000\000\065\001\099\001\107\255\082\001\099\001\
\128\255\126\255\099\001\000\000\015\000\074\255\074\255\123\255\
\123\255\123\255\145\001\145\001\103\255\103\255\103\255\103\255\
\132\001\116\001\230\255\015\000\230\255\000\000\015\000\099\001\
\110\255\155\000\000\000\099\001\230\255\015\000\000\000\130\255\
\230\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\134\255\
\000\000\000\000\135\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\139\255\000\000\142\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\255\000\000\000\000\000\255\
\000\000\145\255\031\255\000\000\000\000\178\000\201\000\052\000\
\075\000\098\000\020\001\038\001\008\255\224\000\247\000\014\001\
\246\255\138\255\000\000\000\000\000\000\000\000\000\000\057\255\
\194\255\000\000\000\000\087\255\000\000\161\255\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\252\255\000\000\137\000\000\000\
\000\000\162\255\242\255\057\000\000\000\000\000"

let yytablesize = 676
let yytable = "\013\000\
\010\000\030\000\058\000\030\000\105\000\058\000\107\000\001\000\
\044\000\014\000\044\000\017\000\046\000\044\000\111\000\048\000\
\049\000\024\000\114\000\051\000\042\000\044\000\044\000\044\000\
\044\000\044\000\044\000\015\000\016\000\044\000\044\000\052\000\
\084\000\052\000\020\000\021\000\052\000\076\000\077\000\079\000\
\080\000\083\000\042\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\055\000\036\000\055\000\036\000\022\000\055\000\036\000\
\036\000\036\000\036\000\036\000\036\000\023\000\104\000\036\000\
\036\000\036\000\036\000\036\000\036\000\026\000\052\000\036\000\
\036\000\055\000\061\000\062\000\063\000\106\000\050\000\027\000\
\108\000\059\000\053\000\056\000\059\000\030\000\042\000\077\000\
\042\000\054\000\031\000\005\000\006\000\007\000\008\000\009\000\
\042\000\032\000\033\000\100\000\042\000\059\000\060\000\061\000\
\062\000\063\000\005\000\006\000\007\000\008\000\009\000\038\000\
\039\000\040\000\041\000\027\000\057\000\028\000\029\000\072\000\
\085\000\030\000\102\000\103\000\113\000\063\000\031\000\109\000\
\006\000\007\000\049\000\029\000\049\000\032\000\033\000\049\000\
\056\000\034\000\035\000\057\000\036\000\037\000\005\000\006\000\
\007\000\008\000\009\000\038\000\039\000\040\000\041\000\027\000\
\049\000\028\000\074\000\029\000\047\000\030\000\112\000\000\000\
\000\000\000\000\031\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\033\000\000\000\000\000\034\000\035\000\000\000\
\036\000\037\000\005\000\006\000\007\000\008\000\009\000\038\000\
\039\000\040\000\041\000\024\000\000\000\024\000\024\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\024\000\000\000\
\000\000\024\000\024\000\000\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\027\000\
\000\000\028\000\000\000\000\000\000\000\030\000\000\000\000\000\
\000\000\000\000\031\000\000\000\000\000\000\000\048\000\000\000\
\048\000\032\000\033\000\048\000\000\000\034\000\035\000\000\000\
\036\000\037\000\005\000\006\000\007\000\008\000\009\000\038\000\
\039\000\040\000\041\000\048\000\048\000\000\000\000\000\000\000\
\027\000\000\000\000\000\000\000\000\000\000\000\030\000\000\000\
\000\000\000\000\000\000\031\000\000\000\005\000\006\000\007\000\
\008\000\009\000\032\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\006\000\007\000\008\000\009\000\
\038\000\039\000\040\000\041\000\039\000\000\000\039\000\000\000\
\000\000\039\000\039\000\039\000\039\000\039\000\000\000\000\000\
\000\000\039\000\039\000\039\000\039\000\039\000\039\000\000\000\
\000\000\039\000\039\000\040\000\000\000\040\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\000\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\
\040\000\040\000\041\000\000\000\041\000\000\000\000\000\041\000\
\041\000\041\000\041\000\041\000\000\000\000\000\000\000\041\000\
\041\000\041\000\041\000\041\000\041\000\058\000\000\000\041\000\
\041\000\000\000\000\000\059\000\060\000\061\000\062\000\063\000\
\000\000\000\000\064\000\065\000\066\000\067\000\068\000\069\000\
\075\000\000\000\070\000\071\000\000\000\000\000\059\000\060\000\
\061\000\062\000\063\000\000\000\000\000\064\000\065\000\066\000\
\067\000\068\000\069\000\110\000\000\000\070\000\071\000\000\000\
\000\000\059\000\060\000\061\000\062\000\063\000\000\000\000\000\
\064\000\065\000\066\000\067\000\068\000\069\000\000\000\000\000\
\070\000\071\000\037\000\000\000\037\000\000\000\000\000\037\000\
\037\000\037\000\000\000\000\000\000\000\000\000\000\000\037\000\
\037\000\037\000\037\000\037\000\037\000\000\000\000\000\037\000\
\037\000\038\000\000\000\038\000\000\000\000\000\038\000\038\000\
\038\000\000\000\000\000\000\000\000\000\000\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\000\000\038\000\038\000\
\045\000\000\000\045\000\000\000\000\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\000\000\000\000\045\000\045\000\046\000\
\000\000\046\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
\046\000\046\000\000\000\000\000\046\000\046\000\047\000\000\000\
\047\000\000\000\000\000\047\000\042\000\000\000\042\000\000\000\
\000\000\042\000\000\000\047\000\047\000\047\000\047\000\047\000\
\047\000\042\000\042\000\047\000\047\000\000\000\043\000\000\000\
\043\000\042\000\042\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\073\000\043\000\043\000\000\000\059\000\060\000\
\061\000\062\000\063\000\043\000\043\000\064\000\065\000\066\000\
\067\000\068\000\069\000\099\000\000\000\070\000\071\000\059\000\
\060\000\061\000\062\000\063\000\000\000\000\000\064\000\065\000\
\066\000\067\000\068\000\069\000\101\000\000\000\070\000\071\000\
\059\000\060\000\061\000\062\000\063\000\000\000\000\000\064\000\
\065\000\066\000\067\000\068\000\069\000\000\000\000\000\070\000\
\071\000\059\000\060\000\061\000\062\000\063\000\000\000\000\000\
\064\000\065\000\066\000\067\000\068\000\069\000\000\000\000\000\
\070\000\071\000\059\000\060\000\061\000\062\000\063\000\000\000\
\000\000\064\000\065\000\066\000\067\000\068\000\069\000\000\000\
\000\000\070\000\059\000\060\000\061\000\062\000\063\000\000\000\
\000\000\064\000\065\000\066\000\067\000\068\000\069\000\059\000\
\060\000\061\000\062\000\063\000\000\000\000\000\000\000\000\000\
\066\000\067\000\068\000\069\000"

let yycheck = "\004\000\
\000\000\001\001\003\001\003\001\099\000\006\001\101\000\001\000\
\001\001\037\001\003\001\016\000\027\000\006\001\109\000\030\000\
\031\000\022\000\113\000\034\000\025\000\014\001\015\001\016\001\
\017\001\018\001\019\001\001\001\002\001\022\001\023\001\001\001\
\001\001\003\001\037\001\003\001\006\001\052\000\053\000\054\000\
\055\000\056\000\047\000\012\001\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\001\001\001\001\003\001\003\001\006\001\006\001\006\001\
\007\001\008\001\009\001\010\001\011\001\004\001\085\000\014\001\
\015\001\016\001\017\001\018\001\019\001\037\001\002\001\022\001\
\023\001\002\001\009\001\010\001\011\001\100\000\001\001\002\001\
\103\000\003\001\002\001\012\001\006\001\008\001\099\000\110\000\
\101\000\002\001\013\001\029\001\030\001\031\001\032\001\033\001\
\109\000\020\001\021\001\001\001\113\000\007\001\008\001\009\001\
\010\001\011\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\002\001\037\001\004\001\005\001\037\001\
\012\001\008\001\003\001\006\001\003\001\011\001\013\001\026\001\
\003\001\003\001\001\001\001\001\003\001\020\001\021\001\006\001\
\003\001\024\001\025\001\003\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\002\001\
\023\001\004\001\005\001\003\001\028\000\008\001\110\000\255\255\
\255\255\255\255\013\001\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\255\255\255\255\024\001\025\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\002\001\255\255\004\001\005\001\255\255\
\255\255\008\001\255\255\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\021\001\255\255\
\255\255\024\001\025\001\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\002\001\
\255\255\004\001\255\255\255\255\255\255\008\001\255\255\255\255\
\255\255\255\255\013\001\255\255\255\255\255\255\001\001\255\255\
\003\001\020\001\021\001\006\001\255\255\024\001\025\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\022\001\023\001\255\255\255\255\255\255\
\002\001\255\255\255\255\255\255\255\255\255\255\008\001\255\255\
\255\255\255\255\255\255\013\001\255\255\029\001\030\001\031\001\
\032\001\033\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\001\001\255\255\003\001\255\255\
\255\255\006\001\007\001\008\001\009\001\010\001\255\255\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\001\001\255\255\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\001\001\255\255\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\001\001\255\255\022\001\
\023\001\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\001\001\255\255\022\001\023\001\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\001\001\255\255\022\001\023\001\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\001\001\255\255\003\001\255\255\255\255\006\001\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\001\001\255\255\003\001\255\255\255\255\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\001\001\255\255\
\003\001\255\255\255\255\006\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\014\001\015\001\022\001\023\001\255\255\001\001\255\255\
\003\001\022\001\023\001\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\003\001\014\001\015\001\255\255\007\001\008\001\
\009\001\010\001\011\001\022\001\023\001\014\001\015\001\016\001\
\017\001\018\001\019\001\003\001\255\255\022\001\023\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\003\001\255\255\022\001\023\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EXPONT\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  DOUBLE\000\
  STRING\000\
  EOF\000\
  "

let yynames_block = "\
  INTLITERAL\000\
  DBLLITERAL\000\
  STRLITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 37 "parser.mly"
            ( _1 )
# 396 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                 ( [], [] )
# 402 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 41 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 410 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 42 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 418 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 46 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 body = List.rev _7 } )
# 431 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
                  ( [] )
# 437 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 53 "parser.mly"
                  ( List.rev _1 )
# 444 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                             ( [(_1,_2)] )
# 452 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 57 "parser.mly"
                             ( (_3,_4) :: _1 )
# 461 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
        ( Int )
# 467 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
           ( Double )
# 473 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
           ( String )
# 479 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
         ( Void )
# 485 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
         ( Bool )
# 491 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                     ( [] )
# 497 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 70 "parser.mly"
                     ( _2 :: _1 )
# 505 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 73 "parser.mly"
               ( (_1, _2) )
# 513 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
                   ( [] )
# 519 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 77 "parser.mly"
                   ( _2 :: _1 )
# 527 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
              ( Expr _1 )
# 534 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
                ( Return Noexpr )
# 540 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                     ( Return _2 )
# 547 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 83 "parser.mly"
                            ( Block(List.rev _2) )
# 554 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 562 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parser.mly"
                                            ( If(_3, _5, _7) )
# 571 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 87 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 581 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                                  ( While(_3, _5) )
# 589 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 89 "parser.mly"
                (Local(_1, _2))
# 597 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                  ( Noexpr )
# 603 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                  ( _1 )
# 610 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 96 "parser.mly"
                     ( IntLiteral(_1) )
# 617 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 97 "parser.mly"
                     ( DblLiteral(_1) )
# 624 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "parser.mly"
                     ( StrLiteral(_1) )
# 631 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                     (BoolLiteral(true))
# 637 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                     (BoolLiteral(false))
# 643 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
                     ( Id(_1) )
# 650 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 658 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 666 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 682 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                     ( Binop(_1, Exp,   _3) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 730 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 746 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                         ( Unop(Neg, _2) )
# 761 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Unop(Not, _2) )
# 768 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Assign(_1, _3) )
# 776 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 118 "parser.mly"
                                 ( Call(_1, _3) )
# 784 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                       ( _2 )
# 791 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                       (LocalAssign(_1, _2, _4))
# 800 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
                  ( [] )
# 806 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 124 "parser.mly"
                  ( List.rev _1 )
# 813 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                            ( [_1] )
# 820 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                            ( _3 :: _1 )
# 828 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
